// Tell elm about prior OAuth state, and pass window size.
const app = Elm.Main.init({
    node: document.getElementById("myapp"),
    flags: rememberedBytes()

});

// OAuth integration ...
/* Fetch back generated bytes from the local storage */
function rememberedBytes() {
    const bytes = localStorage.getItem("bytes");
    return bytes ? bytes.split(",").map(x => parseInt(x,10)) : null;
}


/* Generate high entropy random bytes using the Web Crypto API and
remember them so that they are preserved between redirections. This
allows to protect for XSS & authorization code attacks */
app.ports.genRandomBytes.subscribe(n => {
    const buffer = new Uint8Array(n);
    crypto.getRandomValues(buffer);
    const bytes = Array.from(buffer);
    localStorage.setItem("bytes", bytes);
    app.ports.randomBytes.send(bytes);
});


function storageMessageHandler(msg) {
//    console.log('behold, a message from the land of Elm');
    //console.log(msg);

    switch (msg.Cmd) {

        case 'storage.set':
            //console.log(msg.key); console.log(msg.value);
            localStorage.setItem(msg.key, JSON.stringify( msg.value ) );
            break;

        case 'storage.get':
            var val = null;
            try {
              val = JSON.parse(localStorage.getItem(msg.key))
            } catch (e) {
            };
            app.ports.storageResponses.send({ 'msg' : 'storage.got', 'key' : msg.key, 'value' : val });
            break;

        case 'storage.list':
            var keys = [];
            var cnt = localStorage.length;
            for (var i = 0; i < cnt; i++) {
                var key = localStorage.key(i);
                keys.push(key);
            };
            //console.log(keys);
            app.ports.storageResponses.send({ 'msg' : 'storage.keys', 'keys' : keys });
            break;

        case 'storage.clear':
            localStorage.clear();
            break;

        case 'session.set':
            //console.log(msg.key); console.log(msg.value);
            sessionStorage.setItem(msg.key, JSON.stringify( msg.value ) );
            break;

        case 'session.get':
            var val = null;
            try {
              val = JSON.parse(sessionStorage.getItem(msg.key))
            } catch (e) {
            };
            app.ports.storageResponses.send({ 'msg' : 'session.got', 'key' : msg.key, 'value' : val });
            break;

        case 'session.list':
            var keys = [];
            var cnt = sessionStorage.length;
            for (var i = 0; i < cnt; i++) {
                var key = sessionStorage.key(i);
                keys.push(key);
            };
            //console.log(keys);
            app.ports.storageResponses.send({ 'msg' : 'session.keys', 'keys' : keys });
            break;

        case 'session.clear':
            sessionStorage.clear();
            break;

        case 'memory':
            app.ports.storageResponses.send({ 'msg' : 'memory', 'memory' : performance.memory });
            break;
    }
};

